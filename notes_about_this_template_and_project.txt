
## Playing with the new Fuse React template.

### Examples about making http request using the actions
src/app/auth/store/actions/user.actions.js

there are some examples such as JWT, auth0Service and firebase

### Redux forms
It seems like they use Redux-form in the new version and look to be really cool, nice
```
<FormControl component="fieldset" className={classes.formControl}>
  <FormLabel component="legend" className="text-14">
    Navbar
  </FormLabel>
  <ThemeSelect value={settings.theme.navbar} name="theme.navbar" handleThemeChange={handleChange} />
</FormControl>
```

You can find that example in the following file:
```
src/@fuse/core/FuseSettings/FuseSettings.js
```

El naranja es para el template the smsparatodos app

El color morado/azul es para el demo de fusetemplate

To intercept any http request
```
let oldXHROpen = window.XMLHttpRequest.prototype.open;
window.XMLHttpRequest.prototype.open = function(method, url, async, user, password) {
 console.log("responseURL", this.responseURL)
 console.log("onabort", this.onabort)
 console.log("this['this.onabort']", this['this.onabort'])
 console.log("status", this.status)
 console.log("method", method)
 console.log("url", url)
 console.log("async", async)
 console.log("user", user)
 // do something with the method, url and etc.
 this.addEventListener('load', function() {
  // do something with the response text
  console.log("something here on load..............")
 });
 return oldXHROpen.apply(this, arguments);
}
```

in post
```
let oldXHROpen = window.XMLHttpRequest.prototype.open;
window.XMLHttpRequest.prototype.open = function(method, url, async, user, password) {
 console.log("this", this)
 console.log("this.responseURL", this.responseURL)
 // do something with the method, url and etc.
 this.addEventListener('load', function() {
  // do something with the response text
  console.log("in load")
  getMethods(this)
 });
 return oldXHROpen.apply(this, arguments);
}
```
getMethods
```
const getMethods = (obj) => {
  let properties = new Set()
  let currentObj = obj
  do {
    Object.getOwnPropertyNames(currentObj).map(item => properties.add(item))
  } while ((currentObj = Object.getPrototypeOf(currentObj)))
  return [...properties.keys()].filter(item => typeof obj[item] === 'function')
}
```

